// Vertex shader

const vertexShaderSource = `
attribute vec3 vertex;
attribute vec3 normal;
varying vec3 fragVertex;
varying vec3 fragNormal;
uniform mat4 ModelViewProjectionMatrix;

void main() {
    fragVertex = vertex;
    fragNormal = normal;
    gl_Position = ModelViewProjectionMatrix * vec4(vertex, 1.0);
}`;



// Fragment shader
const fragmentShaderSource = `
#ifdef GL_FRAGMENT_PRECISION_HIGH
   precision highp float;
#else
   precision mediump float;
#endif

varying vec3 fragVertex;
varying vec3 fragNormal;
uniform vec3 lightPos;

void main() {
    vec3 ambientColor = vec3(0.2, 0.2, 0.2); // Fixed inline initialization
    vec3 diffuseColor = vec3(0.8, 0.0, 0.0); // Renamed for clarity
    vec3 specularColor = vec3(1.0, 1.0, 1.0); // Renamed for clarity
    float shininess = 32.0;
    vec3 viewPos = vec3(0.0, 0.0, 1.0); // Fixed inline initialization

    vec3 lightDir = normalize(lightPos - fragVertex);
    float diff = max(dot(fragNormal, lightDir), 0.0);
    vec3 diffuse = diffuseColor * diff;

    vec3 viewDir = normalize(viewPos - fragVertex);
    vec3 reflectDir = reflect(-lightDir, fragNormal);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), shininess);
    vec3 specular = specularColor * spec;

    vec3 result = ambientColor + diffuse + specular;

    gl_FragColor = vec4(result, 1.0);
}
`;